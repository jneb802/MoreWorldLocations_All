<Project Sdk="Microsoft.NET.Sdk">

  <!-- Core project settings -->
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>

    <OutputType>Library</OutputType>
    <RootNamespace>More_World_Locations_AIO</RootNamespace>
    <AssemblyName>More_World_Locations_AIO</AssemblyName>

    <!-- SDK-style needs TargetFramework (not TargetFrameworkVersion) -->
    <TargetFramework>net48</TargetFramework>

    <LangVersion>10</LangVersion>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <!-- Build configs -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!-- Detect Valheim paths on each OS -->
  <Choose>
    <When Condition="($(OS) == 'Unix' OR $(OS) == 'OSX') AND $(GamePath) == ''">
      <PropertyGroup>
        <GamePath Condition="!Exists('$(GamePath)')">$(HOME)/.steam/steam/steamapps/common/Valheim</GamePath>
        <GamePath Condition="!Exists('$(GamePath)')">$(HOME)/Library/Application Support/Steam/steamapps/common/Valheim/Contents/MacOS</GamePath>
        <CorlibPath Condition="!Exists('$(CorlibPath)') AND Exists('$(GamePath)')">$(GamePath)\valheim_Data\Managed</CorlibPath>
        <CorlibPath Condition="!Exists('$(CorlibPath)')">$(GamePath)/unstripped_corelib</CorlibPath>
      </PropertyGroup>
    </When>

    <When Condition="($(OS) == 'Windows_NT') AND $(GamePath) == ''">
      <PropertyGroup>
        <GamePath Condition="!Exists('$(GamePath)')">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Steam App 892970', 'InstallLocation', null, RegistryView.Registry64, RegistryView.Registry32))</GamePath>
        <_SteamLibraryPath>$([MSBuild]::GetRegistryValueFromView('HKEY_CURRENT_USER\SOFTWARE\Valve\Steam', 'SteamPath', null, RegistryView.Registry32))</_SteamLibraryPath>
        <GamePath Condition="!Exists('$(GamePath)') AND '$(_SteamLibraryPath)' != ''">$(_SteamLibraryPath)\steamapps\common\Valheim</GamePath>
        <GamePath Condition="!Exists('$(GamePath)') AND Exists('$(ValheimGamePath)')">$(ValheimGamePath)</GamePath>
        <GamePath Condition="!Exists('$(GamePath)')">C:\Program Files\Steam\steamapps\common\Valheim</GamePath>
        <GamePath Condition="!Exists('$(GamePath)')">C:\Program Files (x86)\Steam\steamapps\common\Valheim</GamePath>

        <BepInExPath Condition="!Exists('$(BepInExPath)') AND Exists('$(GamePath)')">$(GamePath)\BepInEx</BepInExPath>
        <CorlibPath Condition="!Exists('$(CorlibPath)') AND Exists('$(GamePath)')">$(GamePath)\valheim_Data\Managed</CorlibPath>
        <CorlibPath Condition="!Exists('$(CorlibPath)') AND Exists('$(GamePath)')">$(GamePath)\unstripped_corlib</CorlibPath>
        <PublicizedAssembliesPath Condition="!Exists('$(PublicizedAssembliesPath)') AND Exists('$(GamePath)')">$(GamePath)\valheim_Data\Managed\publicized_assemblies</PublicizedAssembliesPath>

        <!-- Used later in custom targets -->
        <AfterTargets Condition="'$(AfterTargets)' == ''">ILRepacker</AfterTargets>
      </PropertyGroup>
    </When>
  </Choose>
  <ItemGroup>
    <Compile Remove="Libs\**" />
    <EmbeddedResource Remove="Libs\**" />
    <None Remove="Libs\**" />
  </ItemGroup>

  <!-- NuGet packages -->
  <ItemGroup>
    <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.3" PrivateAssets="all" />
    <PackageReference Include="BepInEx.BaseLib" Version="5.4.21" />
    <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.18.2" />
    <PackageReference Include="Mono.Cecil" Version="0.11.6" />
    <PackageReference Include="MonoMod" Version="21.9.19.1" />
    <PackageReference Include="MonoMod.RuntimeDetour" Version="22.1.29.1" />
    <PackageReference Include="MonoMod.Utils" Version="22.1.29.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="YamlDotNet" Version="13.2.0" />
  </ItemGroup>

  <!-- Assembly references -->
  <ItemGroup>
    <Reference Include="0Harmony">
      <HintPath>$(BepInExPath)\core\0Harmony.dll</HintPath>
    </Reference>

    <!-- Publicized game assemblies -->
    <Reference Include="assembly_valheim">
      <HintPath>$(CorlibPath)\assembly_valheim.dll</HintPath>
      <Publicize>true</Publicize>
    </Reference>
    <Reference Include="assembly_utils">
      <HintPath>$(CorlibPath)\assembly_utils.dll</HintPath>
      <Publicize>true</Publicize>
    </Reference>
    <Reference Include="assembly_guiutils">
      <HintPath>$(CorlibPath)\assembly_guiutils.dll</HintPath>
      <Publicize>true</Publicize>
    </Reference>

    <!-- Third-party mod APIs -->
    <Reference Include="Jotunn">
      <HintPath>..\GlobalLibs\Jotunn.dll</HintPath>
    </Reference>
    <Reference Include="ServerSync">
      <HintPath>..\GlobalLibs\ServerSync.dll</HintPath>
    </Reference>

    <!-- Unity / TextMeshPro -->
    <Reference Include="UnityEngine">
      <HintPath>$(CorlibPath)\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.AnimationModule">
      <HintPath>$(CorlibPath)\UnityEngine.AnimationModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.AssetBundleModule">
      <HintPath>$(CorlibPath)\UnityEngine.AssetBundleModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(CorlibPath)\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>$(CorlibPath)\UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.IMGUIModule">
      <HintPath>$(CorlibPath)\UnityEngine.IMGUIModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.InputLegacyModule">
      <HintPath>$(CorlibPath)\UnityEngine.InputLegacyModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ParticleSystemModule">
      <HintPath>$(CorlibPath)\UnityEngine.ParticleSystemModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicsModule">
      <HintPath>$(CorlibPath)\UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>$(CorlibPath)\UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(CorlibPath)\UnityEngine.UI.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(CorlibPath)\Unity.TextMeshPro.dll</HintPath>
    </Reference>
    <Reference Include="Splatform">
      <HintPath>$(CorlibPath)\Splatform.dll</HintPath>
    </Reference>
    <Reference Include="SoftReferenceableAssets">
      <HintPath>$(CorlibPath)\SoftReferenceableAssets.dll</HintPath>
      <Publicize>true</Publicize>
    </Reference>

    <!-- Optional legacy system refs (SDK usually provides these automatically) -->
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>

  <!-- Content / resources -->
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>

  <ItemGroup>
    <Content Include=".gitignore" />
    <Content Include="assets\moreworldlocations_assetbundle_1" />
    <Content Include="assets\moreworldlocations_assetbundle_2" />
    <Content Include="assets\moreworldlocations_assetbundle_3" />
    <Content Include="assets\moreworldlocations_assetbundle_4" />

    <EmbeddedResource Include="assets\moreworldlocations_prefabs_1" />
    <EmbeddedResource Include="assets\moreworldlocations_prefabs_2" />
    <EmbeddedResource Include="assets\moreworldlocations_prefabs_3" />
    <EmbeddedResource Include="assets\ports" />
    <EmbeddedResource Include="assets\portlocation" />
    <EmbeddedResource Include="assets\portbundle" />

    <Content Include="environment.props" />
    <Content Include="ILRepack.targets" />
    <Content Include="LICENSE.md" />

    <EmbeddedResource Include="Src\Ports\src\tutorials\delivery.md" />
    <EmbeddedResource Include="Src\Ports\src\tutorials\manifest.md" />
    <EmbeddedResource Include="Src\Ports\src\tutorials\port.md" />
    <EmbeddedResource Include="Src\Ports\src\tutorials\shipment.md" />
    <EmbeddedResource Include="Src\Ports\src\tutorials\teleport.md" />
    <Content Include="UpdateManifest.ps1" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="YAML\warpalicious.More_World_Locations_CreatureLists.yml" />
    <EmbeddedResource Include="YAML\warpalicious.More_World_Locations_LootLists.yml" />
  </ItemGroup>

  <!-- Remove bad Unity reference -->
  <ItemGroup>
    <Reference Remove="UnityEngine.ProfilerModule" />
  </ItemGroup>

  <Target Name="RemoveBadUnityReferences" BeforeTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferencePath Remove="@(ReferencePath)" Condition=" '%(FileName)' == 'UnityEngine.ProfilerModule' " />
      <Reference Remove="UnityEngine.ProfilerModule" />
    </ItemGroup>
  </Target>

  <!-- Local tasks / pipeline -->
  <UsingTask AssemblyFile="KeyManager.dll" TaskName="KeyManager.Seal" Condition="'$(AfterTargets)' == 'KeyManager'" />
  <Target Name="KeyManager" AfterTargets="ILRepack" Condition="'$(AfterTargets)' == 'KeyManager'">
    <Seal DLL="$(TargetPath)" />
  </Target>

  <Target Name="GetAssemblyVersion" AfterTargets="$(AfterTargets)">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <AssemblyVersions Include="@(Targets->'%(Version)')" />
    </ItemGroup>
    <PropertyGroup>
      <AssemblyVersion>%(AssemblyVersions.Identity)</AssemblyVersion>
      <Major>$(AssemblyVersion.Split('.')[0])</Major>
      <Minor>$(AssemblyVersion.Split('.')[1])</Minor>
      <Patch>$(AssemblyVersion.Split('.')[2])</Patch>
      <PackageName>$(AssemblyName)_v$(Major).$(Minor).$(Patch)</PackageName>
      <PackageVersion>$(Major).$(Minor).$(Patch)</PackageVersion>
      <VersionString>$(Major).$(Minor).$(Patch)</VersionString>
      <PackageDir>$(ProjectDir)\Thunderstore\$(PackageName)</PackageDir>
    </PropertyGroup>
  </Target>

  <Target Name="CopyOutputDLL" AfterTargets="ILRepack">
  <!-- Only run if the main output exists -->
  <PropertyGroup>
    <_BuiltDll>$(TargetPath)</_BuiltDll>
  </PropertyGroup>

  <Message Importance="High" Text="CopyOutputDLL: Output is '$(_BuiltDll)'" />
  <Warning Text="DLL not found: $(_BuiltDll)" Condition="!Exists('$(_BuiltDll)')" />

  <!-- Primary copy -->
  <Copy SourceFiles="$(_BuiltDll)" DestinationFolder="$(CopyOutputDLLPath)" OverwriteReadOnlyFiles="true" Condition="Exists('$(_BuiltDll)') AND '$(CopyOutputDLLPath)' != ''" />

  <!-- Optional extra copies -->
  <Copy SourceFiles="$(_BuiltDll)" DestinationFolder="$(CopyOutputDLLPath2)" OverwriteReadOnlyFiles="true" Condition="Exists('$(_BuiltDll)') AND Exists('$(CopyOutputDLLPath2)')" />

  <Copy SourceFiles="$(_BuiltDll)" DestinationFolder="$(CopyOutputDLLPath3)" OverwriteReadOnlyFiles="true" Condition="Exists('$(_BuiltDll)') AND Exists('$(CopyOutputDLLPath3)')" />
  </Target>

  <UsingTask TaskName="WriteManifestFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <ManifestFile ParameterType="System.String" Required="true" />
      <AssemblyName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (!System.IO.File.Exists(ManifestFile))
{
string content = @"{
  ""name"": """ + AssemblyName + @""",
  ""version_number"": ""1.0.0"",
  ""website_url"": ""https://discord.gg/pdHgy6Bsng"",
  ""description"": ""Your mod description goes here. Do not forget to replace the icon.png file with your own. Must be 256x256. Your Readme.md file will be copied from the one in your project folder."",
  ""dependencies"": [
    ""denikson-BepInExPack_Valheim-5.4.2105""
]
}";
System.IO.File.WriteAllText(ManifestFile, content);
}
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="CopyReadMeToTSFolder" AfterTargets="CopyOutputDLL" Condition=" ('$(Configuration)|$(Platform)' == 'Release|AnyCPU') And ('$(OS)' == 'Windows_NT') ">
    <Warning Text="README.md not found in project directory. A default README.md file will be created for the Thunderstore package" Condition="!Exists('README.md')" />
    <WriteLinesToFile File="README.md" Lines="Default Readme file from one of Azumatt's Templates. Replace this with actual content." Overwrite="false" Condition="!Exists('README.md')" />
    <Copy SourceFiles="README.md" DestinationFolder="$(PackageDir)" OverwriteReadOnlyFiles="true" />
    <Copy SourceFiles="README.md" DestinationFolder="$(ProjectDir)\Thunderstore" OverwriteReadOnlyFiles="true" />
  </Target>

  <Target Name="UpdateManifestVersion" AfterTargets="CopyReadmeToTSFolder" Condition=" ('$(Configuration)|$(Platform)' == 'Release|AnyCPU') And ('$(OS)' == 'Windows_NT') ">
    <WriteManifestFile ManifestFile="$(ProjectDir)Thunderstore\manifest.json" AssemblyName="$(AssemblyName)" />
    <ItemGroup>
      <ManifestFile Include="$(ProjectDir)Thunderstore\manifest.json" />
    </ItemGroup>
    <Message Text="ManifestFile is @(ManifestFile)" />
    <Message Text="Updating version number in Thunderstore\manifest.json" Condition="Exists(@(ManifestFile))" />
    <Exec Command="powershell.exe -ExecutionPolicy Bypass -Command &quot;&amp; { &amp; '$(ProjectDir)UpdateManifest.ps1' -manifestFile '@(ManifestFile)' -versionString '$(PackageVersion)' }&quot;" />
  </Target>

  <Target Name="MakeThunderstorePackage" AfterTargets="UpdateManifestVersion" Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <Error Text="manifest.json not found in Thunderstore directory." Condition="!Exists('$(ProjectDir)\Thunderstore\manifest.json')" />
    <Error Text="icon.png not found in Thunderstore directory. Please note that Thunderstore requires this image to be 256x256 in dimension" Condition="!Exists('$(ProjectDir)\Thunderstore\icon.png')" />
    <ItemGroup>
      <PackageFiles Include="$(TargetDir)$(AssemblyName).dll" Condition="Exists('$(TargetDir)$(AssemblyName).dll')" />
      <PackageFiles Include="$(ProjectDir)\Thunderstore\CHANGELOG.md" Condition="Exists('$(ProjectDir)\Thunderstore\CHANGELOG.md')" />
      <PackageFiles Include="$(ProjectDir)\Thunderstore\manifest.json" Condition="Exists('$(ProjectDir)\Thunderstore\manifest.json')" />
      <PackageFiles Include="$(ProjectDir)\Thunderstore\icon.png" Condition="Exists('$(ProjectDir)\Thunderstore\icon.png')" />
    </ItemGroup>
    <MakeDir Directories="$(PackageDir)" />
    <Copy SourceFiles="@(PackageFiles)" DestinationFolder="$(PackageDir)" />
    <ZipDirectory SourceDirectory="$(PackageDir)" DestinationFile="Thunderstore\$(PackageName).zip" Overwrite="true" />
    <RemoveDir Directories="$(PackageDir)" />
  </Target>

  <Target Name="MakeNexusPackage" AfterTargets="MakeThunderstorePackage" Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <MakeDir Directories="$(ProjectDir)\Nexus" />
    <ItemGroup>
      <NexusPackageFiles Include="$(TargetDir)$(AssemblyName).dll;" />
    </ItemGroup>
    <MakeDir Directories="$(PackageDir)" />
    <Copy SourceFiles="@(NexusPackageFiles)" DestinationFolder="$(PackageDir)" />
    <ZipDirectory SourceDirectory="$(PackageDir)" DestinationFile="Nexus\$(PackageName).zip" Overwrite="true" />
    <RemoveDir Directories="$(PackageDir)" />
  </Target>

  <!-- Shared project import -->
  <Import Project="..\Common\Common.projitems" Label="Shared" Condition="Exists('..\Common\Common.projitems')" />

</Project>
